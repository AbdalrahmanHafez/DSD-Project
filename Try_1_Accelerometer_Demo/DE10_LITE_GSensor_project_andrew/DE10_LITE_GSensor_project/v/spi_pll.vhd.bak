--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : apache on 2/22/21 9:43 AM
--
--
library ieee;
use ieee.std_logic_1164.all;
package vl2vh_common_pack is 
    type vl2vh_memory_type is      array  ( natural range <> , natural range <>  )  of std_logic ;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic; 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector; 
end package; 




package body vl2vh_common_pack is 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity altpll is 
     port (
        areset :  in std_logic;
        inclk :  inout std_logic_vector( 1  downto 0  );
        clk :  inout std_logic_vector( 4  downto 0  );
        activeclock :  inout std_logic;
        clkbad :  inout std_logic;
        clkena :  inout std_logic;
        clkloss :  inout std_logic;
        clkswitch :  inout std_logic;
        configupdate :  inout std_logic;
        enable0 :  inout std_logic;
        enable1 :  inout std_logic;
        extclk :  inout std_logic;
        extclkena :  inout std_logic;
        fbin :  inout std_logic;
        fbmimicbidir :  inout std_logic;
        fbout :  inout std_logic;
        fref :  inout std_logic;
        icdrclk :  inout std_logic;
        locked :  inout std_logic;
        pfdena :  inout std_logic;
        phasecounterselect :  inout std_logic;
        phasedone :  inout std_logic;
        phasestep :  inout std_logic;
        phaseupdown :  inout std_logic;
        pllena :  inout std_logic;
        scanaclr :  inout std_logic;
        scanclk :  inout std_logic;
        scanclkena :  inout std_logic;
        scandata :  inout std_logic;
        scandataout :  inout std_logic;
        scandone :  inout std_logic;
        scanread :  inout std_logic;
        scanwrite :  inout std_logic;
        sclkout0 :  inout std_logic;
        sclkout1 :  inout std_logic;
        vcooverrange :  inout std_logic;
        vcounderrange :  inout std_logic
    );
end entity; 


architecture rtl of altpll is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity spi_pll is 
     port (
        areset :  in std_logic;
        inclk0 :  in std_logic;
        c0 :  out std_logic := sub_wire4;
        c1 :  out std_logic := sub_wire5
    );
end entity; 


architecture rtl of spi_pll is 
    signal sub_wire2 : std_logic_vector( 0  downto 0  ) := X"0" ;
    signal sub_wire3 : std_logic_vector( 4  downto 0  );
    signal sub_wire0 : std_logic := inclk0;
    signal sub_wire1 : std_logic_vector( 1  downto 0  ) := ( sub_wire2 & sub_wire0 );
    signal sub_wire5 : std_logic_vector( 1  downto 1  ) := sub_wire3(1  downto 1 );
    signal sub_wire4 : std_logic_vector( 0  downto 0  ) := sub_wire3(0  downto 0 );
    component altpll is 
         port (
            areset :  in std_logic;
            inclk :  inout std_logic_vector( 1  downto 0  );
            clk :  inout std_logic_vector( 4  downto 0  );
            activeclock :  inout std_logic;
            clkbad :  inout std_logic;
            clkena :  inout std_logic;
            clkloss :  inout std_logic;
            clkswitch :  inout std_logic;
            configupdate :  inout std_logic;
            enable0 :  inout std_logic;
            enable1 :  inout std_logic;
            extclk :  inout std_logic;
            extclkena :  inout std_logic;
            fbin :  inout std_logic;
            fbmimicbidir :  inout std_logic;
            fbout :  inout std_logic;
            fref :  inout std_logic;
            icdrclk :  inout std_logic;
            locked :  inout std_logic;
            pfdena :  inout std_logic;
            phasecounterselect :  inout std_logic;
            phasedone :  inout std_logic;
            phasestep :  inout std_logic;
            phaseupdown :  inout std_logic;
            pllena :  inout std_logic;
            scanaclr :  inout std_logic;
            scanclk :  inout std_logic;
            scanclkena :  inout std_logic;
            scandata :  inout std_logic;
            scandataout :  inout std_logic;
            scandone :  inout std_logic;
            scanread :  inout std_logic;
            scanwrite :  inout std_logic;
            sclkout0 :  inout std_logic;
            sclkout1 :  inout std_logic;
            vcooverrange :  inout std_logic;
            vcounderrange :  inout std_logic
        );
    end component; 
    begin 
        altpll_component : altpll
            port map (
                activeclock =>  open ,
                areset => areset,
                clk => sub_wire3,
                clkbad =>  open ,
                clkena => ( '1' & '1' & '1' & '1' & '1' & '1' ),
                clkloss =>  open ,
                clkswitch => '0',
                configupdate => '0',
                enable0 =>  open ,
                enable1 =>  open ,
                extclk =>  open ,
                extclkena => ( '1' & '1' & '1' & '1' ),
                fbin => '1',
                fbmimicbidir =>  open ,
                fbout =>  open ,
                fref =>  open ,
                icdrclk =>  open ,
                inclk => sub_wire1,
                locked =>  open ,
                pfdena => '1',
                phasecounterselect => ( '1' & '1' & '1' & '1' ),
                phasedone =>  open ,
                phasestep => '1',
                phaseupdown => '1',
                pllena => '1',
                scanaclr => '0',
                scanclk => '0',
                scanclkena => '1',
                scandata => '0',
                scandataout =>  open ,
                scandone =>  open ,
                scanread => '0',
                scanwrite => '0',
                sclkout0 =>  open ,
                sclkout1 =>  open ,
                vcooverrange =>  open ,
                vcounderrange =>  open 
                );
    end; 


