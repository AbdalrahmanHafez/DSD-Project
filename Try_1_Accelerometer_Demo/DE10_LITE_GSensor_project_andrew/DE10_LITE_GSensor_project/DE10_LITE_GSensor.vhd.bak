--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : apache on 2/22/21 9:39 AM
--
--
library ieee;
use ieee.std_logic_1164.all;
package vl2vh_common_pack is 
    type vl2vh_memory_type is      array  ( natural range <> , natural range <>  )  of std_logic ;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic; 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector; 
end package; 




package body vl2vh_common_pack is 
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic;  constant falseval : std_logic)  return std_logic is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
    function vl2vh_ternary_func(  constant cond : Boolean;  constant trueval : std_logic_vector;  constant falseval : std_logic_vector)  return std_logic_vector is 
    begin
        if ( cond ) then 
             return trueval;
        else 
             return falseval;
        end if;
    end;
end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity reset_delay is 
     port (
        iRSTN :  in std_logic;
        iCLK :  in std_logic;
        oRST :  inout std_logic
    );
end entity; 


architecture rtl of reset_delay is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity spi_pll is 
     port (
        areset :  inout std_logic;
        inclk0 :  in std_logic;
        c0 :  inout std_logic;
        c1 :  inout std_logic
    );
end entity; 


architecture rtl of spi_pll is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity spi_ee_config is 
     port (
        iRSTN :  inout std_logic;
        iSPI_CLK :  inout std_logic;
        iSPI_CLK_OUT :  inout std_logic;
        iG_INT2 :  in std_logic;
        oDATA_L :  inout std_logic_vector( 7  downto 0  );
        oDATA_H :  inout std_logic_vector( 7  downto 0  );
        SPI_SDIO :  inout std_logic;
        oSPI_CSN :  out std_logic;
        oSPI_CLK :  out std_logic
    );
end entity; 


architecture rtl of spi_ee_config is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity led_driver is 
     port (
        iRSTN :  inout std_logic;
        iCLK :  in std_logic;
        iDIG :  inout std_logic_vector( 9  downto 0  );
        iG_INT2 :  in std_logic;
        oLED :  out std_logic_vector( 9  downto 0  )
    );
end entity; 


architecture rtl of led_driver is 
    begin 
    end; 


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity DE10_LITE_GSensor is 
     port (
        ADC_CLK_10 :  in std_logic;
        MAX10_CLK1_50 :  in std_logic;
        MAX10_CLK2_50 :  in std_logic;
        DRAM_ADDR :  out std_logic_vector( 12  downto 0  );
        DRAM_BA :  out std_logic_vector( 1  downto 0  );
        DRAM_CAS_N :  out std_logic;
        DRAM_CKE :  out std_logic;
        DRAM_CLK :  out std_logic;
        DRAM_CS_N :  out std_logic;
        DRAM_DQ :  inout std_logic_vector( 15  downto 0  );
        DRAM_LDQM :  out std_logic;
        DRAM_RAS_N :  out std_logic;
        DRAM_UDQM :  out std_logic;
        DRAM_WE_N :  out std_logic;
        KEY :  in std_logic_vector( 1  downto 0  );
        LEDR :  out std_logic_vector( 9  downto 0  );
        SW :  in std_logic_vector( 9  downto 0  );
        VGA_B :  out std_logic_vector( 3  downto 0  );
        VGA_G :  out std_logic_vector( 3  downto 0  );
        VGA_HS :  out std_logic;
        VGA_R :  out std_logic_vector( 3  downto 0  );
        VGA_VS :  out std_logic;
        GSENSOR_CS_N :  out std_logic;
        GSENSOR_INT :  in std_logic_vector( 2  downto 1  );
        GSENSOR_SCLK :  out std_logic;
        GSENSOR_SDI :  inout std_logic;
        GSENSOR_SDO :  inout std_logic;
        ARDUINO_IO :  inout std_logic_vector( 15  downto 0  );
        ARDUINO_RESET_N :  inout std_logic
    );
end entity; 


architecture rtl of DE10_LITE_GSensor is 
    signal dly_rst : std_logic;
    signal spi_clk : std_logic;
    signal spi_clk_out : std_logic;
    signal data_x : std_logic_vector( 15  downto 0  );
    component reset_delay is 
         port (
            iRSTN :  in std_logic;
            iCLK :  in std_logic;
            oRST :  inout std_logic
        );
    end component; 
    component spi_pll is 
         port (
            areset :  inout std_logic;
            inclk0 :  in std_logic;
            c0 :  inout std_logic;
            c1 :  inout std_logic
        );
    end component; 
    component spi_ee_config is 
         port (
            iRSTN :  inout std_logic;
            iSPI_CLK :  inout std_logic;
            iSPI_CLK_OUT :  inout std_logic;
            iG_INT2 :  in std_logic;
            oDATA_L :  inout std_logic_vector( 7  downto 0  );
            oDATA_H :  inout std_logic_vector( 7  downto 0  );
            SPI_SDIO :  inout std_logic;
            oSPI_CSN :  out std_logic;
            oSPI_CLK :  out std_logic
        );
    end component; 
    component led_driver is 
         port (
            iRSTN :  inout std_logic;
            iCLK :  in std_logic;
            iDIG :  inout std_logic_vector( 9  downto 0  );
            iG_INT2 :  in std_logic;
            oLED :  out std_logic_vector( 9  downto 0  )
        );
    end component; 
    begin 
        u_reset_delay : reset_delay
            port map (
                iCLK => MAX10_CLK1_50,
                iRSTN => KEY(0 ),
                oRST => dly_rst
                );
        u_spi_pll : spi_pll
            port map (
                areset => dly_rst,
                c0 => spi_clk,
                c1 => spi_clk_out,
                inclk0 => MAX10_CLK1_50
                );
        u_spi_ee_config : spi_ee_config
            port map (
                SPI_SDIO => GSENSOR_SDI,
                iG_INT2 => GSENSOR_INT(1 ),
                iRSTN => (  not dly_rst ) ,
                iSPI_CLK => spi_clk,
                iSPI_CLK_OUT => spi_clk_out,
                oDATA_H => data_x(15  downto 8 ),
                oDATA_L => data_x(7  downto 0 ),
                oSPI_CLK => GSENSOR_SCLK,
                oSPI_CSN => GSENSOR_CS_N
                );
        u_led_driver : led_driver
            port map (
                iCLK => MAX10_CLK1_50,
                iDIG => data_x(9  downto 0 ),
                iG_INT2 => GSENSOR_INT(1 ),
                iRSTN => (  not dly_rst ) ,
                oLED => LEDR
                );
    end; 


